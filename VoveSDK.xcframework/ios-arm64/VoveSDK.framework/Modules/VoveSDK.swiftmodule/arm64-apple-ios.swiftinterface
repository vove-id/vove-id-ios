// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name VoveSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Combine
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import Vision
import VisionKit
@_exported import VoveSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims

public struct VoveCustomStyle {
  public init(primaryColor: SwiftUICore.Color, darkPrimaryColor: SwiftUICore.Color, backgroundColor: SwiftUICore.Color, textColor: SwiftUICore.Color, buttonTextColor: SwiftUICore.Color)
}
public enum VerificationResult {
  case success, failure, pending, canceled, maxAttempts
  public static func == (a: VoveSDK.VerificationResult, b: VoveSDK.VerificationResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

public enum VoveEnvironment {
  case sandbox, production
  public static func == (a: VoveSDK.VoveEnvironment, b: VoveSDK.VoveEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VoveLocale {
  case en, fr, ar, arMA
  public static func == (a: VoveSDK.VoveLocale, b: VoveSDK.VoveLocale) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VoveCustomization {
}
@_hasMissingDesignatedInitializers public class Vove {
  public static func start(sessionToken: Swift.String, showUI: Swift.Bool = true, completion: @escaping (VoveSDK.VerificationResult?, Swift.String?) -> Swift.Void)
  public static func initialize(publicKey: Swift.String, environment: VoveSDK.VoveEnvironment, completion: @escaping (Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
  public static func setVocalGuidanceEnabled(_ isEnabled: Swift.Bool)
  public static func setLocal(local: VoveSDK.VoveLocale)
  public static func getCurrentLocale() -> VoveSDK.VoveLocale?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class VoveSnapViewController : UIKit.UIViewController {
  public struct Config {
    public var brandColor: SwiftUICore.Color
    public var accentColor: SwiftUICore.Color
    public var idleTitle: Swift.String
    public var uploadTitle: Swift.String
    public var previewTitle: Swift.String
    public var showBackCopy: Swift.String
    public var idleButton: Swift.String
    public var uploadFileButton: Swift.String
    public var focusHint: Swift.String
    public var retakeButtonText: Swift.String
    public var confirmButtonText: Swift.String
    public var unsupportedDocumentMessage: Swift.String
    public var retryButtonText: Swift.String
    public var cameraPermissionTitle: Swift.String
    public var cameraPermissionMessage: Swift.String
    public var cameraPermissionButtonText: Swift.String
    public var requiresBackSide: Swift.Bool
    public init()
  }
  public typealias UploadFunction = (Foundation.Data, Swift.String, Swift.String, @escaping (Swift.Double) -> Swift.Void) -> Combine.AnyPublisher<Swift.String, any Swift.Error>
  @_Concurrency.MainActor @preconcurrency public init(config: VoveSDK.VoveSnapViewController.Config = .init(), uploadFunction: @escaping VoveSDK.VoveSnapViewController.UploadFunction, onResult: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
extension VoveSDK.VoveSnapViewController {
  @_Concurrency.MainActor @preconcurrency convenience public init(customStyle: VoveSDK.VoveCustomStyle, uploadFunction: @escaping VoveSDK.VoveSnapViewController.UploadFunction, onResult: @escaping (Swift.Result<Swift.String, any Swift.Error>) -> Swift.Void)
}
extension VoveSDK.VoveSnapViewController.Config {
  public func tintedImage(named imageName: Swift.String, isDarkMode: Swift.Bool, customStyle: VoveSDK.VoveCustomStyle? = nil) -> UIKit.UIImage
}
extension VoveSDK.VoveSnapViewController : UIKit.UIDocumentPickerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @_Concurrency.MainActor @preconcurrency @objc final public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
extension VoveSDK.VerificationResult : Swift.Equatable {}
extension VoveSDK.VerificationResult : Swift.Hashable {}
extension VoveSDK.VoveEnvironment : Swift.Equatable {}
extension VoveSDK.VoveEnvironment : Swift.Hashable {}
extension VoveSDK.VoveLocale : Swift.Equatable {}
extension VoveSDK.VoveLocale : Swift.Hashable {}
